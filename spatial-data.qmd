---
title: "Working with spatial data"
author: "Kim Ely"
format: html
---
## Load libraries
```{r}
library(readr)
library(sf)
library(ggplot2)
library(leaflet)
library(scales)
library(ggspatial)
library(dplyr)
```

## Download data 
```{r}
knb_url <- "https://dev.nceas.ucsb.edu/knb/d1/mn/v2/object/urn%3Auuid%3Aaceaecb2-1ce0-4d41-a839-d3607d32bb58"

download.file(url = knb_url, destfile = 'shapefile_demo_data.zip')

unzip('shapefile_demo_data.zip', exdir = 'data')

file.remove('shapefile_demo_data.zip')
```

## Read data
```{r}
# read in shapefile using read_sf()
ak_regions <- read_sf("data/ak_regions_simp.shp")
# quick plot
plot(ak_regions)
# note, something weird going on with map. To look at that... (answer: data not projected)
class(ak_regions)
head(ak_regions)
glimpse(ak_regions)
```

## Checking crs of spatial data
```{r}
st_crs(ak_regions)

```

## transforming projection to Alaska Albers (good for Alaska maps)
```{r}
ak_regions_3338 <- ak_regions %>%
    st_transform(crs = 3338)

st_crs(ak_regions_3338)
plot(ak_regions_3338)

```

## "sf' and Tidyverse (suite of packages, ggplot, dplyr, others...)
Selecting region column
```{r}
# check colnames
colnames(ak_regions_3338)
# select region, note that geometry column is sticky, and is always there
ak_regions_3338 %>% 
  select(region)
```

Filtering a region
```{r}
# check what regions are
unique(ak_regions_3338$region)
# filter (but not creating an output here)
ak_regions_3338 %>% 
  filter(region == "Southeast")

```

# Spatial joins
Calculating the total population of each Alaska region
1. Read population data
```{r}
pop <- read_csv("data/alaska_population.csv")
head(pop)
```

2. Transform pop into spatial object (crs code for WG084 is 4326). remove = F is don't remove lat, lon columns. 
```{r}
pop_4326 <- st_as_sf(pop,
                     coords = c('lng', 'lat'),
                     crs = 4326,
                     remove = F)

head(pop_4326)
class(pop_4326)
```

3. Join population data with Alaska region (first throws a projection error: crs not equal) Comment out to render doc
```{r}
#pop_joined <- st_join(pop_4326, 
 #                     ak_regions_3338, 
  #                    join = st_within)
```

Transform pop data to Alaska Albers projection
```{r}
pop_3338 <- st_transform(pop_4326, 
                         crs = 3338)
# check projection
st_crs(pop_3338)

# execute join of spatial objects. st_join is left join
pop_joined <- st_join(pop_3338, 
                      ak_regions_3338, 
                      join = st_within)
head(pop_joined)

```

Calculate total population by region (transform spatial data into data frame to apply other functions, loses spatial information)
```{r}
pop_region <- pop_joined %>%
    as.data.frame() %>%
    group_by(region) %>%
    summarise(total_pop = sum(population))

head(pop_region)
```

Include spatial information by joining
```{r}
pop_region_3338 <- left_join(ak_regions_3338, 
                             pop_region, 
                             by = "region")
head(pop_region_3338)

# plot to check
plot(pop_region_3338["total_pop"])

```

New summary of pop data by management area, add do_union = F to stop uniting the polygons
```{r}
pop_mgmt_3338 <- pop_region_3338 %>%
    group_by(mgmt_area) %>%
    summarize(total_pop = sum(total_pop), do_union = F)


plot(pop_mgmt_3338["total_pop"])
```

Save spatial object
```{r}
write_sf(pop_region_3338, "data/ak_regions_population.shp")
```

Make it nicer in ggplot, using geom_sf
```{r}
ggplot(pop_region_3338) +
    geom_sf(aes(fill = total_pop)) +
    labs(fill = "Total Population") +
    scale_fill_continuous(low = "khaki",
                          high =  "firebrick",
                          labels = comma) +
    theme_bw()

```

Add more shapefiles
Read in rivers dataset
```{r}
rivers_3338 <- read_sf("data/ak_rivers_simp.shp")
st_crs(rivers_3338)
head(rivers_3338)
```

Add to new plot
```{r}
ggplot() +
    geom_sf(data = pop_region_3338, 
            aes(fill = total_pop)) +
    geom_sf(data = pop_3338, 
            size = 0.5) +
    geom_sf(data = rivers_3338,
            aes(linewidth = StrOrder)) +
    scale_linewidth(range = c(0.05, 0.5), 
                    guide = "none") +
    labs(title = "Total Population by Alaska Region",
         fill = "Total Population") +
    scale_fill_continuous(low = "khaki",
                          high =  "firebrick",
                          labels = comma) +
    theme_bw() 
```

## Adding basemaps (can be tricky - fast evolving field) using ggspatial. Using Open Stree Map (osm). Uh oh, didn't work. Come back to resolving projection error. ggmap has more map options be need to be accessed via API, too much extra content for this course.Commenting out for now to render doc
```{r}
#ggplot(data = pop_3338) +
#    ggspatial::annotation_map_tile(type = "osm", zoom = 4) + # higher zoom values are more detailed 
 #   geom_sf(aes(color = population),
  #          fill = NA) +
   # scale_color_continuous(low = "darkkhaki",
    #                       high =  "firebrick",
     #                      labels = comma)
```

## Leaflet - making interative maps
Defining leaflet projection to Alaska Albers
```{r}
epsg3338 <- leaflet::leafletCRS(
    crsClass = "L.Proj.CRS",
    code = "EPSG:3338",
    proj4def =  "+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
    resolutions = 2 ^ (16:7)
)
```

Transform population by region into unprojected coordinate system for Leaflet
```{r}
# Check projection
st_crs(pop_region_3338)
# Transform to remove projection
pop_region_4326 <- pop_region_3338 %>% 
    st_transform(crs = 4326)
```

Plot with Leaflet.  
```{r}

m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(data = pop_region_4326,
                fillColor = "gray",
                weight = 1)

m
```

Add more map features in Leaflet
```{r}

pal <- colorNumeric(palette = "Reds", domain = pop_region_4326$total_pop)

m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(
        data = pop_region_4326,
        fillColor = ~ pal(total_pop),
        weight = 1,
        color = "black",
        fillOpacity = 1,
        label = ~ region
    ) %>%
    addLegend(
        position = "bottomleft",
        pal = pal,
        values = range(pop_region_4326$total_pop),
        title = "Total Population"
    )

m
```

And add more features
```{r}
pal <- colorNumeric(palette = "Reds", domain = pop_region_4326$total_pop)

m <- leaflet(options = leafletOptions(crs = epsg3338)) %>%
    addPolygons(
        data = pop_region_4326,
        fillColor = ~ pal(total_pop),
        weight = 1,
        color = "black",
        fillOpacity = 1
    ) %>%
    addCircleMarkers(
        data = pop_4326,
        lat = ~ lat,
        lng = ~ lng,
        radius = ~ log(population / 500),
        # arbitrary scaling
        fillColor = "gray",
        fillOpacity = 1,
        weight = 0.25,
        color = "black",
        label = ~ paste0(pop_4326$city, ", population ", comma(pop_4326$population))
    ) %>%
    addLegend(
        position = "bottomleft",
        pal = pal,
        values = range(pop_region_4326$total_pop),
        title = "Total Population"
    )

m

```

